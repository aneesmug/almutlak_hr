<?php
require_once __DIR__ . '/includes/db.php';
require_once __DIR__ . '/includes/session_check.php';
$query = mysqli_query($conDB, "SELECT * FROM `admin_login` WHERE `id_iqama`='" . $username . "'");
if (mysqli_num_rows($query) == 1) {
    include("./includes/avatar_select.php");
?>
    <!doctype html>
    <html lang="en">

    <head>
        <meta charset="utf-8" />
        <title><?= $site_title ?> - Payroll Management</title>
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <!--        <meta content="A fully featured admin theme which can be used to build CRM, CMS, etc." name="description" />-->
        <meta content="Anees Afzal" name="author" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />

        <!-- App favicon -->
        <link rel="shortcut icon" href="assets/images/favicon.ico">

        <!-- Modal -->
        <link href="./plugins/custombox/css/custombox.min.css" rel="stylesheet">

        <!-- Plugins css -->
        <link href="./plugins/bootstrap-timepicker/bootstrap-timepicker.min.css" rel="stylesheet">
        <link href="./plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css" rel="stylesheet">
        <link href="./plugins/bootstrap-datepicker/css/bootstrap-datepicker.min.css" rel="stylesheet">
        <link href="./plugins/clockpicker/css/bootstrap-clockpicker.min.css" rel="stylesheet">
        <link href="./plugins/bootstrap-daterangepicker/daterangepicker.css" rel="stylesheet">
        <!-- DataTables -->
        <link href="./plugins/datatables/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
        <link href="./plugins/datatables/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />
        <link href="./plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
        <link href="./plugins/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
        <!-- Responsive datatable examples -->
        <link href="./plugins/datatables/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />

        <!-- Multi Item Selection examples -->
        <link href="./plugins/datatables/select.bootstrap4.min.css" rel="stylesheet" type="text/css" />

        <!-- App css -->
        <link href="assets/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/icons.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/metismenu.min.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/style.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/style_dark.css" rel="stylesheet" type="text/css" />
        <script src="assets/js/modernizr.min.js"></script>
    </head>

    <body class="enlarged" data-keep-enlarged="true">

        <!-- Begin page -->
        <div id="wrapper">

            <!-- ========== Left Sidebar Start ========== -->
            <div class="left side-menu">

                <div class="slimscroll-menu" id="remove-scroll">

                    <!-- LOGO -->
                    <div class="topbar-left">
                        <a href="dashboard.php" class="logo">
                            <span>
                                <img src="assets/images/logo.png" alt="" height="22">
                            </span>
                            <i>
                                <img src="assets/images/logo_sm.png" alt="" height="28">
                            </i>
                        </a>
                    </div>

                    <!-- User box -->

                    <!--- Sidemenu -->
                    <?php include("./includes/main_menu.php"); ?>
                    <!-- Sidebar -->

                    <div class="clearfix"></div>

                </div>
                <!-- Sidebar -left -->

            </div>
            <!-- Left Sidebar End -->



            <!-- ============================================================== -->
            <!-- Start right Content here -->
            <!-- ============================================================== -->

            <div class="content-page">

                <!-- Top Bar Start -->
                <?php include("./includes/topbar.php"); ?>
                <!-- Top Bar End -->


                <!-- Start Page content -->
                <div class="content">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12">
                                <div class="card-box table-responsive">
                                    <!-- <a href="add_car.php" class="btn btn-primary waves-effect"><i class="mdi mdi-car"></i> Add New Car</a> -->
                                    <h4 class="m-t-0 header-title">Employee Payroll Management</h4>

                                    <div class="card-body">
                                        <!-- Controls Section -->
                                        <div class="card bg-light border-light-subtle mb-4 p-3 rounded-3">
                                            <div class="row g-3 align-items-end">
                                                <!-- Month Selector -->
                                                <div class="col-lg-3 col-md-6">
                                                    <label for="payrollMonth" class="form-label fw-medium">Select Month</label>
                                                    <input type="month" id="payrollMonth" class="form-control">
                                                </div>

                                                <!-- Department Filter -->
                                                <div class="col-lg-3 col-md-6">
                                                    <label for="departmentFilter" class="form-label fw-medium">Filter by Department</label>
                                                    <select id="departmentFilter" class="custom-select">
                                                        <option value="" selected>All Departments</option>
                                                        <!-- Department options will be populated here by JavaScript -->
                                                    </select>
                                                </div>

                                                <!-- Spacer Column -->
                                                <div class="col-lg"></div>

                                                <!-- Action Buttons -->
                                                <div class="col-lg-auto">
                                                    <div class="d-grid d-md-flex gap-2">
                                                        <button id="generatePayrollBtn" class="btn btn-lg btn-primary">
                                                            Generate Payroll for Selected
                                                        </button>
                                                        <button id="generateReportBtn" class="btn btn-lg btn-outline-secondary">
                                                            Generate Payroll Report
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Table Section -->
                                        <div class="table-responsive">
                                            <table id="employeeTable" class="table table-striped table-hover align-middle w-100">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th scope="col" class="text-center" style="width: 50px;">
                                                            <input class="" type="checkbox" id="selectAllEmployees">
                                                        </th>
                                                        <th scope="col" style="width: 120px;">Employee ID</th>
                                                        <th scope="col">Name</th>
                                                        <th scope="col" style="width: 230px;">Department</th>
                                                        <th scope="col" style="width: 200px;">Salary</th>
                                                        <th scope="col" style="width: 100px;">Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Data will be loaded by DataTables or JavaScript -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>


                                </div>
                            </div>
                        </div>


                    </div> <!-- container -->

                </div> <!-- content -->

                <footer class="footer">
                    <?= $site_footer ?>
                </footer>

            </div>

            <!-- ============================================================== -->
            <!-- End Right content here -->
            <!-- ============================================================== -->
        </div>
        <!-- END wrapper -->


        <!-- jQuery  -->
        <script src="assets/js/jquery.min.js"></script>
        <script src="assets/js/bootstrap.bundle.min.js"></script>
        <script src="assets/js/metisMenu.min.js"></script>
        <script src="assets/js/waves.js"></script>
        <script src="assets/js/jquery.slimscroll.js"></script>


        <!-- Modal-Effect -->
        <script type="text/javascript" src="./plugins/parsleyjs/parsley.min.js"></script>
        <!-- <script src="./plugins/bootstrap-inputmask/bootstrap-inputmask.min.js" type="text/javascript"></script> -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.3.4/jquery.inputmask.bundle.min.js" type="text/javascript"></script>
        <script src="./plugins/autoNumeric/autoNumeric.js" type="text/javascript"></script>


        <script src="./plugins/moment/moment.js"></script>
        <script src="./plugins/bootstrap-timepicker/bootstrap-timepicker.js"></script>
        <script src="./plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>
        <script src="./plugins/clockpicker/js/bootstrap-clockpicker.min.js"></script>
        <script src="./plugins/bootstrap-daterangepicker/daterangepicker.js"></script>
        <script src="./plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>

        <!-- App js -->
        <!-- <script src="assets/pages/jquery.form-pickers.init.js"></script> -->

        <!-- Required datatable js -->
        <script src="./plugins/datatables/jquery.dataTables.min.js"></script>
        <script src="./plugins/datatables/dataTables.bootstrap4.min.js"></script>
        <!-- Buttons examples -->
        <script src="./plugins/datatables/dataTables.buttons.min.js"></script>
        <script src="./plugins/datatables/buttons.bootstrap4.min.js"></script>
        <script src="./plugins/datatables/jszip.min.js"></script>
        <script src="./plugins/datatables/pdfmake.min.js"></script>
        <script src="./plugins/datatables/vfs_fonts.js"></script>
        <script src="./plugins/datatables/buttons.html5.min.js"></script>
        <script src="./plugins/datatables/buttons.print.min.js"></script>

        <!-- Key Tables -->
        <script src="./plugins/datatables/dataTables.keyTable.min.js"></script>

        <script src="./plugins/select2/js/select2.min.js" type="text/javascript"></script>
        <script src="./plugins/bootstrap-select/js/bootstrap-select.js" type="text/javascript"></script>

        <!-- Responsive examples -->
        <script src="./plugins/datatables/dataTables.responsive.min.js"></script>
        <script src="./plugins/datatables/responsive.bootstrap4.min.js"></script>

        <script type="text/javascript" src="./plugins/autocomplete/jquery.autocomplete.min.js"></script>

        <!-- Selection table -->
        <script src="./plugins/datatables/dataTables.select.min.js"></script>

        
        
        <script src="https://cdn.sheetjs.com/xlsx-0.19.3/package/dist/xlsx.full.min.js"></script>
        <!-- jsPDF and jspdf-autotable for PDF export -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>


        <!-- App js -->
        <script src="assets/js/jquery.core.js"></script>
        <script src="assets/js/jquery.app.js"></script>

       <script>
        let employeeTable; // DataTables instance
        let allEmployeesData = []; // Store raw employee data fetched from API
        let currentEventListeners = []; // Array to store cleanup functions for event listeners

        $(document).ready(function() {
            // Set default month to current month
            window.today = new Date();  // Makes it globally available
            $('#payrollMonth').val(`${getDateParts(today, 'year')}-${getDateParts(today, 'month')}`);
            // Initialize DataTable
            initializeDataTable();
            // Fetch employees on initial load and when month changes
            $('#payrollMonth').on('change', fetchEmployees);
            fetchEmployees();
            // Add event listener for the new report button
            $('#generateReportBtn').off('click').on('click', generatePayrollReport);
        });

        function initializeDataTable() {
            employeeTable = $('#employeeTable').DataTable({
                columns: [
                    { 
                        data: null,
                        orderable: false,
                        className: 'text-center',
                        render: function(data, type, row) {
                            // Check if payroll is generated for the current month
                            // The `payroll_status` comes from the get_employees.php API response
                            const isPayrollGenerated = row.payroll_status && (row.payroll_status === 'generated');
                            const isPayrollPaid = row.payroll_status && (row.payroll_status === 'paid');
                            if (isPayrollGenerated) {
                                return '<span class="badge badge-primary">Generated</span>';
                            } else if (isPayrollPaid){
                                return '<span class="badge badge-success"><i class="fa fa-certificate"></i> Paid</span>';
                            }
                            return `<input type="checkbox" class="employee-checkbox" data-emp-id="${row.emp_id}">`;
                        }
                    },
                    { data: 'emp_id' },
                    { data: 'name' },
                    { data: 'department_name' }, // Use 'dept' field for department name
                    { 
                        data: 'salary',
                        render: function(data, type, row) {
                            return `SAR ${parseFloat(data).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                        }
                    },
                    {
                        data: null,
                        orderable: false,
                        render: function(data, type, row) {
                            return `
                                <button class="btn btn-dark btn-sm view-edit-btn" data-emp-id="${row.emp_id}" data-emp-name="${row.name}"><i class="mdi mdi-account-edit"></i> Edit</button>
                            `;
                        }
                    }
                ],
                order: [[2, 'asc']], // Sort by Name by default
                pageLength: 10,
                lengthMenu: [5, 10, 25, 50, 100, 500],
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search employees...",
                    lengthMenu: "Show _MENU_ employees per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ employees",
                    infoEmpty: "No employees found",
                    infoFiltered: "(filtered from _MAX_ total employees)"
                },
                // dom: '<"flex justify-between items-center mb-4"lf>rt<"flex justify-between items-center mt-4"ip>',
                // The `initComplete` function is crucial for attaching event listeners after DataTables has drawn the table.
                initComplete: function() {
                    addEventListeners(); // Initial attachment of listeners
                }
            });
        }

        async function fetchEmployees() {
            const loadingIndicator = $('#loadingIndicator');
            const noDataMessage = $('#noDataMessage');
            const selectedMonth = $('#payrollMonth').val();
            loadingIndicator.removeClass('hidden');
            noDataMessage.addClass('hidden');
            try {
                // Ensure this path is correct for your server setup
                const response = await fetch(`./includes/api/get_employees.php?month=${selectedMonth}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server responded with status ${response.status}: ${errorText}`);
                }
                const data = await response.json();
                if (data.status === 'success') {
                    allEmployeesData = data.employees;
                    // Clear existing DataTables rows and add new ones
                    employeeTable.clear().rows.add(allEmployeesData).draw();
                    populateDepartmentFilter(allEmployeesData);
                    addEventListeners(); // Re-attach listeners after data update
                } else {
                    showError('Error', data.message || 'Failed to load employee data.');
                    employeeTable.clear().draw(); // Clear table on error
                }
            } catch (error) {
                console.error('Error fetching employees:', error);
                showError('Network Error', `Error connecting to the server or parsing data: ${error.message}.`);
                employeeTable.clear().draw(); // Clear table on network error
            } finally {
                loadingIndicator.addClass('hidden');
                if (allEmployeesData.length === 0 && noDataMessage.hasClass('hidden')) {
                     // Only show no data message if there truly is no data after fetch
                    noDataMessage.removeClass('hidden').text('No employee data available for the selected month/filters.');
                }
            }
        }

        function populateDepartmentFilter(employees) {
            const departmentFilter = $('#departmentFilter');
            const currentSelectedDept = departmentFilter.val(); // Remember current selection
            departmentFilter.empty().append('<option value="">All Departments</option>');
            const departments = new Set();
            employees.forEach(emp => {
                if (emp.dept) {
                    departments.add(emp.department_name);
                }
            });
            const sortedDepartments = Array.from(departments).sort();
            sortedDepartments.forEach(department_name => {
                departmentFilter.append(`<option value="${department_name}">${department_name}</option>`);
            });
            // Restore previous selection if it still exists
            if (sortedDepartments.includes(currentSelectedDept)) {
                departmentFilter.val(currentSelectedDept);
            } else {
                departmentFilter.val(''); // Reset to All if previous selection is gone
            }
            // Unbind and rebind change event for department filter
            departmentFilter.off('change').on('change', function() {
                const selectedDept = $(this).val();
                // DataTables column search works on the raw data of the column
                // In our setup, 'dept' is the 4th column (index 3, 0-indexed)
                employeeTable.column(3).search(selectedDept ? `^${selectedDept}$` : '', true, false).draw();
                // Update main select all checkbox for currently visible rows
                updateMainSelectAllCheckbox();
            });
        }

        function addEventListeners() {
            // It's crucial to remove previous event listeners before re-adding them
            // to prevent multiple bindings and unexpected behavior, especially with DataTables.
            // Clear previously stored cleanup functions
            currentEventListeners.forEach(cleanup => cleanup());
            currentEventListeners = [];
            // Select all checkbox
            const selectAllHandler = function() {
                const isChecked = $(this).prop('checked');
                // Select only visible and non-generated/selectable checkboxes
                employeeTable.rows({ page: 'current' }).nodes().to$().find('.employee-checkbox:not(:disabled)').prop('checked', isChecked);
                updateMainSelectAllCheckbox();
            };
            $('#selectAllEmployees').off('change', selectAllHandler).on('change', selectAllHandler);
            currentEventListeners.push(() => $('#selectAllEmployees').off('change', selectAllHandler));
            // Individual employee checkbox (delegated using jQuery on)
            const employeeCheckboxHandler = function() {
                updateMainSelectAllCheckbox();
            };
            $('#employeeTable').off('change', '.employee-checkbox', employeeCheckboxHandler).on('change', '.employee-checkbox', employeeCheckboxHandler);
            currentEventListeners.push(() => $('#employeeTable').off('change', '.employee-checkbox', employeeCheckboxHandler));
            // View/Edit Payroll button (delegated using jQuery on)
            const viewEditBtnHandler = function() {
                const empId = $(this).data('emp-id');
                const empName = $(this).data('emp-name');
                const month = $('#payrollMonth').val();
                showPayrollDetails(empId, empName, month);
            };
            $('#employeeTable').off('click', '.view-edit-btn', viewEditBtnHandler).on('click', '.view-edit-btn', viewEditBtnHandler);
            currentEventListeners.push(() => $('#employeeTable').off('click', '.view-edit-btn', viewEditBtnHandler));
            // Generate Payroll button
            $('#generatePayrollBtn').off('click', generatePayroll).on('click', generatePayroll);
            currentEventListeners.push(() => $('#generatePayrollBtn').off('click', generatePayroll));

            // New: Generate Payroll Report button
            $('#generateReportBtn').off('click', generatePayrollReport).on('click', generatePayrollReport);
            currentEventListeners.push(() => $('#generateReportBtn').off('click', generatePayrollReport));

            // Handle delete buttons within the SweetAlert2 modal for benefits
            // These event listeners need to be attached dynamically *after* the SweetAlert2 modal is opened.
            // This is handled within the `showPayrollDetails` function's `didOpen` callback.
        }

        // Updates the main "Select All" checkbox based on individual employee checkboxes
        function updateMainSelectAllCheckbox() {
            const selectAllMain = $('#selectAllEmployees');
            // Get only the checkboxes that are currently visible (on the current page of DataTables)
            // and are not disabled (i.e., not already generated payrolls)
            const visibleSelectableCheckboxes = employeeTable.rows({ page: 'current' }).nodes().to$().find('.employee-checkbox:not(:disabled)');
            const checkedVisibleCheckboxes = visibleSelectableCheckboxes.filter(':checked');

            if (visibleSelectableCheckboxes.length === 0) {
                selectAllMain.prop('checked', false).prop('indeterminate', false);
            } else if (checkedVisibleCheckboxes.length === visibleSelectableCheckboxes.length) {
                selectAllMain.prop('checked', true).prop('indeterminate', false);
            } else if (checkedVisibleCheckboxes.length > 0) {
                selectAllMain.prop('checked', false).prop('indeterminate', true);
            } else {
                selectAllMain.prop('checked', false).prop('indeterminate', false);
            }
        }
        
        async function generatePayroll() {
            // Get all checked employee checkboxes and extract their IDs
            const selectedEmployees = employeeTable.rows().nodes().to$().find('.employee-checkbox:checked').map(function() {
                return $(this).data('emp-id');
            }).get();

            const payrollMonth = $('#payrollMonth').val();

            // Validate that at least one employee is selected
            if (selectedEmployees.length === 0) {
                showWarning('No Employees Selected', 'Please select at least one employee to generate payroll.');
                return;
            }

            // Validate that a payroll month is selected
            if (!payrollMonth) {
                showWarning('Month Not Selected', 'Please select a payroll month.');
                return;
            }

            // Show a loading indicator while processing
            Swal.fire({
                title: 'Generating Payroll...',
                html: 'Please wait, this might take a moment.',
                didOpen: () => Swal.showLoading(),
                allowOutsideClick: false,
                allowEscapeKey: false
            });

            try {
                // Send the request to the server to process the payroll
                const response = await fetch('./includes/api/process_payroll.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        employee_ids: selectedEmployees,
                        month: payrollMonth
                    }),
                });
                const result = await response.json();

                // If the server responds with 'success', show a success message
                if (result.status === 'success') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Payroll Generated!',
                        text: result.message,
                        confirmButtonColor: '#6366f1'
                    });
                    fetchEmployees(); // Refresh employee list to update status
                } else {
                    // If the server responds with an error (e.g., previous month unpaid), throw an error
                    throw new Error(result.message || 'An unexpected error occurred.');
                }
            } catch (error) {
                // Catch any errors from the fetch or from the server's response and display them
                console.error('Error:', error);
                // The error message from the PHP script will be displayed here
                showError('Error Generating Payroll', error.message);
            }
        }

        async function showPayrollDetails(empId, empName, month) {
            // Clean up previous listeners before opening new modal
            currentEventListeners.forEach(cleanup => cleanup());
            currentEventListeners = [];

            Swal.fire({
                title: `Loading Payroll for ${empName} (${empId})...`,
                html: 'Please wait.',
                didOpen: () => Swal.showLoading(),
                allowOutsideClick: false,
                allowEscapeKey: false
            });

            try {
                const response = await fetch(`./includes/api/get_payroll_details.php?emp_id=${empId}&month=${month}`);
                const data = await response.json();

                if (data.status === 'success') {
                    const payroll = data.payroll;
                    const employee = data.employee;
                    const benefits = data.benefits;
                    let deductions = data.deductions; // Use 'let' so we can modify it
                    // --- New Logic for GOSI and House Deduction ---
                    if (employee.country === '191') { // Assuming 'country' is a property of the employee object and 191 is its value
                        // CORRECTED LINE: Parse each value to a float individually, then add them.
                        const basicPlusHousing = parseFloat(payroll.basic_salary) + parseFloat(payroll.housing_allowance);
                        const gosiAmount = (basicPlusHousing * 0.0975).toFixed(2); // Calculate 9.75% of basic + housing
                        // Check if GOSI deduction already exists to avoid duplicates
                        const gosiExists = deductions.some(d => d.deduction === 'GOSI');
                        if (!gosiExists) {
                            deductions.push({ id: null, deduction: 'GOSI', note: gosiAmount });
                        }
                    }
                    // --- End New Logic ---
                    let benefitsHtml = benefits.length > 0 ? benefits.map(b => {
                        const benefitName = b.benefit || '';
                        const benefitAmount = parseFloat(b.note || 0).toFixed(2);
                        return `
                            <div class="item-row row mb-1">
                                <input type="text" class="col-md-8 form-control form-control-sm benefit-name" data-benefit-id="${b.id}" value="${benefitName}" placeholder="Benefit Name">
                                <input type="number" step="0.01" class="col-md-3 form-control form-control-sm benefit-amount" data-benefit-id="${b.id}" value="${benefitAmount}" placeholder="Amount">
                                <button class="btn btn-sm btn-danger delete-benefit-btn col-md-1" data-benefit-id="${b.id}">
                                    <i class="fi fi-cross font-18 vertical-middle"></i>
                                </button>
                            </div>
                        `;
                    }).join('') : '<p class="text-sm text-gray-500">No benefits recorded for this month.</p>';

                    let deductionsHtml = deductions.length > 0 ? deductions.map(d => {
                        const deductionName = d.deduction || '';
                        const deductionAmount = parseFloat(d.note || 0).toFixed(2);
                        return `
                            <div class="item-row row mb-1">
                                <input type="text" class="col-md-8 form-control form-control-sm deduction-name" data-deduction-id="${d.id}" value="${deductionName}" placeholder="Deduction Name">
                                <input type="number" step="0.01" class="col-md-3 amount-input form-control form-control-sm deduction-amount" data-deduction-id="${d.id}" value="${deductionAmount}" placeholder="Amount">
                                <button class="btn btn-sm btn-danger delete-deduction-btn col-md-1" data-deduction-id="${d.id}">
                                    <i class="fi fi-cross font-18 vertical-middle"></i>
                                </button>
                            </div>
                        `;
                    }).join('') : '<p class="text-sm text-gray-500">No deductions recorded for this month.</p>';

                    Swal.fire({
                        // title: `Payroll Details`,
                        html: `
                            <table class="table table-bordered" style="font-size:12px !important;">
                                <thead class="thead-light">
                                    <tr>
                                        <th colspan="4">
                                            <h4 class="mb-0">Payroll Details ${employee.name}</h4>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th colspan="4">
                                            <h5 class="mb-0">Salary Breakdown</h5>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td class="font-weight-bold">Basic</td>
                                        <td>SAR ${parseFloat(payroll.basic_salary).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                        <td class="font-weight-bold">Housing</td>
                                        <td>SAR ${parseFloat(payroll.housing_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                    <tr>
                                        <td class="font-weight-bold">Transport</td>
                                        <td>SAR ${parseFloat(payroll.transport_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                        <td class="font-weight-bold">Food</td>
                                        <td>SAR ${parseFloat(payroll.food_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                    <tr>
                                        <td class="font-weight-bold">Miscellaneous</td>
                                        <td>SAR ${parseFloat(payroll.miscellaneous_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                        <td class="font-weight-bold">Cashier</td>
                                        <td>SAR ${parseFloat(payroll.cashier_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                    <tr>
                                        <td class="font-weight-bold">Fuel</td>
                                        <td>SAR ${parseFloat(payroll.fuel_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                        <td class="font-weight-bold">Telephone</td>
                                        <td>SAR ${parseFloat(payroll.telephone_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                    <tr>
                                        <td class="font-weight-bold">Other</td>
                                        <td>SAR ${parseFloat(payroll.other_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                        <td class="font-weight-bold">Guard</td>
                                        <td>SAR ${parseFloat(payroll.guard_allowance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                    <tr class="table-secondary">
                                        <td class="font-weight-bold" colspan="2">Gross Salary</td>
                                        <td class="font-weight-bold" colspan="2">SAR ${parseFloat(payroll.total_gross_salary).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                </tbody>
                                <thead class="thead-light">
                                    <tr>
                                        <th colspan="4">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0">Benefits</h5>
                                                <button id="addBenefitBtn" class="btn btn-sm btn-success">Add Benefit</button>
                                            </div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="4" class="p-0">
                                            <div id="benefits-list" class="p-3">${benefitsHtml}</div>
                                        </td>
                                    </tr>
                                </tbody>
                                <thead class="thead-light">
                                    <tr>
                                        <th colspan="4">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0">Deductions</h5>
                                                <button id="addDeductionBtn" class="btn btn-sm btn-danger">Add Deduction</button>
                                            </div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="4" class="p-0">
                                        <div id="deductions-list" class="p-3">${deductionsHtml}</div>
                                        </td>
                                    </tr>
                                </tbody>
                                <tfoot class="table-totals">
                                    <tr class="table-info">
                                        <th class="text-right" colspan="2">Total Benefits:</th>
                                        <th id="totalBenefitsDisplay" colspan="2">SAR ${parseFloat(payroll.total_benefits).toLocaleString('en-US', { minimumFractionDigits: 2 })}</th>
                                    </tr>
                                    <tr class="table-warning">
                                        <th class="text-right" colspan="2">Total Deductions:</th>
                                        <th id="totalDeductionsDisplay" colspan="2">SAR ${parseFloat(payroll.total_deductions).toLocaleString('en-US', { minimumFractionDigits: 2 })}</th>
                                    </tr>
                                    <tr class="table-primary">
                                        <th class="text-right h4 mb-0" colspan="2">Net Salary:</th>
                                        <th class="h4 mb-0" id="netSalaryDisplay" colspan="2">SAR ${parseFloat(payroll.net_salary).toLocaleString('en-US', { minimumFractionDigits: 2 })}</th>
                                    </tr>
                                </tfoot>
                            </table>
                        `,
                        width: 700,
                        showCancelButton: true,
                        confirmButtonText: 'Save Changes',
                        confirmButtonColor: '#6366f1',
                        cancelButtonText: 'Close',
                        didOpen: () => {
                            const originalGrossSalary = parseFloat(payroll.total_gross_salary);
                            const updateDynamicNetSalary = () => updateNetSalaryDisplay(originalGrossSalary);

                            // Helper to attach event listeners and add to cleanup array
                            const addDynamicEventListener = (element, event, handler) => {
                                element.addEventListener(event, handler);
                                currentEventListeners.push(() => element.removeEventListener(event, handler));
                            };

                            // Add new benefit button
                            const addBenefitBtn = document.getElementById('addBenefitBtn');
                            addDynamicEventListener(addBenefitBtn, 'click', () => {
                                const benefitsList = document.getElementById('benefits-list');
                                const newBenefitDiv = document.createElement('div');
                                newBenefitDiv.classList.add('item-row');
                                newBenefitDiv.classList.add('row');
                                newBenefitDiv.classList.add('mb-1');
                                newBenefitDiv.innerHTML = `
                                    <input type="text" class="col-md-8 form-control form-control-sm new-benefit-name" placeholder="Benefit Name">
                                    <input type="number" step="0.01" class="col-md-3 form-control form-control-sm new-benefit-amount" value="0.00" placeholder="Amount">
                                    <button class="btn btn-sm btn-danger delete-benefit-btn col-md-1"><i class="fi fi-cross font-18 vertical-middle"></i></button>
                                `;
                                benefitsList.appendChild(newBenefitDiv);
                                
                                const deleteBtn = newBenefitDiv.querySelector('.delete-benefit-btn');
                                addDynamicEventListener(deleteBtn, 'click', function() { $(this).closest('.item-row').remove(); updateDynamicNetSalary(); });

                                const amountInput = newBenefitDiv.querySelector('.new-benefit-amount');
                                addDynamicEventListener(amountInput, 'input', updateDynamicNetSalary);
                                
                                updateDynamicNetSalary();
                            });

                            // Add new deduction button
                            const addDeductionBtn = document.getElementById('addDeductionBtn');
                            addDynamicEventListener(addDeductionBtn, 'click', () => {
                                const deductionsList = document.getElementById('deductions-list');
                                const newDeductionDiv = document.createElement('div');
                                newDeductionDiv.classList.add('item-row');
                                newDeductionDiv.classList.add('row');
                                newDeductionDiv.classList.add('mb-1');
                                newDeductionDiv.innerHTML = `
                                    <input type="text" class="col-md-8 form-control form-control-sm new-deduction-name" placeholder="Deduction Name">
                                    <input type="number" step="0.01" class="col-md-3 form-control form-control-sm new-deduction-amount" value="0.00" placeholder="Amount">
                                    <button class="btn btn-sm btn-danger delete-deduction-btn col-md-1"><i class="fi fi-cross font-18 vertical-middle"></i></button>
                                `;
                                deductionsList.appendChild(newDeductionDiv);

                                const deleteBtn = newDeductionDiv.querySelector('.delete-deduction-btn');
                                addDynamicEventListener(deleteBtn, 'click', function() { $(this).closest('.item-row').remove(); updateDynamicNetSalary(); });
                                
                                const amountInput = newDeductionDiv.querySelector('.new-deduction-amount');
                                addDynamicEventListener(amountInput, 'input', updateDynamicNetSalary);
                                updateDynamicNetSalary();
                            });

                            // Add input event listeners to recalculate totals dynamically for existing fields
                            document.querySelectorAll('.benefit-amount, .deduction-amount').forEach(input => {
                                addDynamicEventListener(input, 'input', updateDynamicNetSalary);
                            });

                            // Add event listeners for delete buttons for existing benefits/deductions
                            document.querySelectorAll('.delete-benefit-btn').forEach(btn => {
                                addDynamicEventListener(btn, 'click', async function() {
                                    const benefitId = this.dataset.benefitId;
                                    const row = this.closest('.item-row');
                                    
                                    if (!benefitId) { // For newly added, unsaved items
                                        row.remove();
                                        updateDynamicNetSalary();
                                        return;
                                    }

                                    const swalResult = await Swal.fire({
                                        title: 'Delete Benefit?',
                                        text: 'Are you sure you want to delete this benefit?',
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#d33',
                                        cancelButtonColor: '#3085d6',
                                        confirmButtonText: 'Yes, delete it!'
                                    });

                                    if (swalResult.isConfirmed) {
                                        try {
                                            const response = await fetch('./includes/api/delete_benefit.php', {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json' },
                                                body: JSON.stringify({ benefit_id: benefitId, emp_id: empId, month: month })
                                            });
                                            const data = await response.json();
                                            
                                            if (data.status === 'success') {
                                                row.remove();
                                                updateDynamicNetSalary();
                                                Swal.fire('Deleted!', 'The benefit has been deleted.', 'success');
                                            } else {
                                                throw new Error(data.message || 'Failed to delete benefit');
                                            }
                                        } catch (error) {
                                            Swal.fire('Error!', error.message, 'error');
                                        }
                                    }
                                });
                            });

                            document.querySelectorAll('.delete-deduction-btn').forEach(btn => {
                                addDynamicEventListener(btn, 'click', async function() {
                                    const deductionId = this.dataset.deductionId;
                                    const row = this.closest('.item-row');

                                    if (!deductionId) { // For newly added, unsaved items
                                        row.remove();
                                        updateDynamicNetSalary();
                                        return;
                                    }

                                    const swalResult = await Swal.fire({
                                        title: 'Delete Deduction?',
                                        text: 'Are you sure you want to delete this deduction?',
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#d33',
                                        cancelButtonColor: '#3085d6',
                                        confirmButtonText: 'Yes, delete it!'
                                    });

                                    if (swalResult.isConfirmed) {
                                        try {
                                            const response = await fetch('./includes/api/delete_deduction.php', {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json' },
                                                body: JSON.stringify({ deduction_id: deductionId, emp_id: empId, month: month })
                                            });
                                            const data = await response.json();
                                            
                                            if (data.status === 'success') {
                                                row.remove();
                                                updateDynamicNetSalary();
                                                Swal.fire('Deleted!', 'The deduction has been deleted.', 'success');
                                            } else {
                                                throw new Error(data.message || 'Failed to delete deduction');
                                            }
                                        } catch (error) {
                                            Swal.fire('Error!', error.message, 'error');
                                        }
                                    }
                                });
                            });

                            updateDynamicNetSalary(); // Initial calculation for display
                        },
                        preConfirm: () => {
                            const updatedBenefits = Array.from(document.querySelectorAll('#benefits-list > .item-row')).map(div => {
                                const benefitAmountInput = div.querySelector('.benefit-amount') || div.querySelector('.new-benefit-amount');
                                const benefitNameInput = div.querySelector('.benefit-name') || div.querySelector('.new-benefit-name');
                                const benefitId = benefitAmountInput ? benefitAmountInput.dataset.benefitId : null;

                                return {
                                    id: benefitId,
                                    name: benefitNameInput ? benefitNameInput.value.trim() : '',
                                    amount: parseFloat(benefitAmountInput.value || 0)
                                };
                            }).filter(b => b.name !== '' || b.amount > 0);

                            const updatedDeductions = Array.from(document.querySelectorAll('#deductions-list > .item-row')).map(div => {
                                const deductionAmountInput = div.querySelector('.deduction-amount') || div.querySelector('.new-deduction-amount');
                                const deductionNameInput = div.querySelector('.deduction-name') || div.querySelector('.new-deduction-name');
                                const deductionId = deductionAmountInput ? deductionAmountInput.dataset.deductionId : null;

                                return {
                                    id: deductionId,
                                    name: deductionNameInput ? deductionNameInput.value.trim() : '',
                                    amount: parseFloat(deductionAmountInput.value || 0)
                                };
                            }).filter(d => d.name !== '' || d.amount > 0);

                            return { updatedBenefits, updatedDeductions };
                        }
                    }).then((result) => {
                        // Re-attach all global listeners after SweetAlert2 closes
                        addEventListeners();
                        if (result.isConfirmed) {
                            savePayrollChanges(empId, month, result.value.updatedBenefits, result.value.updatedDeductions);
                        }
                    });

                } else {
                    showError('Error Loading Payroll', data.message || 'Failed to load payroll details');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('Network Error', error.message);
            }
        }

        function updateNetSalaryDisplay(grossSalary) {
            const benefitsDisplay = document.getElementById('totalBenefitsDisplay');
            const deductionsDisplay = document.getElementById('totalDeductionsDisplay');
            const netSalaryDisplay = document.getElementById('netSalaryDisplay');
            
            if (!benefitsDisplay || !deductionsDisplay || !netSalaryDisplay) {
                return; // Exit if elements don't exist (e.g., modal not open)
            }

            const parsedGross = typeof grossSalary === 'string' ? 
                parseFloat(grossSalary.replace(/[^0-9.-]/g, '')) : 
                parseFloat(grossSalary);

            let totalBenefits = 0;
            document.querySelectorAll('.benefit-amount, .new-benefit-amount').forEach(input => {
                const value = input.value.trim();
                totalBenefits += value ? parseFloat(value) : 0;
            });

            let totalDeductions = 0;
            document.querySelectorAll('.deduction-amount, .new-deduction-amount').forEach(input => {
                const value = input.value.trim();
                totalDeductions += value ? parseFloat(value) : 0;
            });

            const netSalary = Math.round((parsedGross + totalBenefits - totalDeductions) * 100) / 100;

            const formatCurrency = (amount) => {
                return 'SAR ' + amount.toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            };

            benefitsDisplay.textContent = formatCurrency(totalBenefits);
            deductionsDisplay.textContent = formatCurrency(totalDeductions);
            netSalaryDisplay.textContent = formatCurrency(netSalary);
        }

        async function savePayrollChanges(empId, month, updatedBenefits, updatedDeductions) {
            Swal.fire({
                title: 'Saving Changes...',
                html: 'Please wait.',
                didOpen: () => Swal.showLoading(),
                allowOutsideClick: false,
                allowEscapeKey: false
            });

            try {
                const response = await fetch('./includes/api/update_payroll.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        emp_id: empId,
                        month: month,
                        benefits: updatedBenefits,
                        deductions: updatedDeductions
                    }),
                });
                const result = await response.json();

                if (result.status === 'success') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Changes Saved!',
                        text: result.message,
                        confirmButtonColor: '#6366f1'
                    });
                    fetchEmployees(); // Refresh employee list to ensure payroll status is updated
                } else {
                    throw new Error(result.message || 'Failed to save changes');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('Error Saving Changes', error.message);
            }
        }

        function showError(title, message) {
            Swal.fire({
                icon: 'error',
                title: title,
                text: message,
                confirmButtonColor: '#6366f1'
            });
        }

        function showWarning(title, message) {
            Swal.fire({
                icon: 'warning',
                title: title,
                text: message,
                confirmButtonColor: '#6366f1'
            });
        }

        // --- NEW: Payroll Report Functionality ---
        async function generatePayrollReport() {
            Swal.fire({
                title: 'Select Report Month',
                html: `
                    <div class="text-left mb-4">
                        <label for="reportMonthSelect" class="block text-gray-700 text-sm font-bold mb-2">
                            Choose a month to generate the payroll report:
                        </label>
                        <select id="reportMonthSelect" class="custom-select shadow px-3">
                            <!-- Options will be loaded dynamically -->
                        </select>
                    </div>
                `,
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Generate Report',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#6366f1',
                // Pre-confirmation logic: validate if a month is selected
                preConfirm: () => {
                    const selectedMonth = $('#reportMonthSelect').val();
                    if (!selectedMonth) {
                        Swal.showValidationMessage('Please select a month to generate the report.');
                    }
                    return selectedMonth; // Return the selected month if valid
                },
                // didOpen callback: executed after the modal is opened
                didOpen: async () => {
                    const reportMonthSelect = document.getElementById('reportMonthSelect');
                    Swal.showLoading(); // Show loading indicator inside the modal
                    try {
                        // Fetch available payroll months from your specified API
                        const response = await fetch('./includes/api/get_available_months.php'); 
                        if (!response.ok) {
                            throw new Error('Failed to fetch available payroll months for report.');
                        }
                        const data = await response.json();

                        if (data.status === 'success' && data.months.length > 0) {
                            // Populate the select dropdown with fetched months
                            data.months.forEach(month => {
                                const option = document.createElement('option');
                                option.value = month.value;
                                option.textContent = month.label;
                                reportMonthSelect.appendChild(option);
                            });
                            // Select the first month by default (usually the most recent)
                            if (data.months.length > 0) {
                                reportMonthSelect.value = data.months[0].value;
                            }
                            Swal.hideLoading(); // Hide loading indicator
                        } else {
                            Swal.hideLoading();
                            // If no months are found, show a validation message and disable the confirm button
                            Swal.showValidationMessage('No generated payroll months found.');
                            Swal.getConfirmButton().disabled = true;
                        }
                    } catch (error) {
                        console.error('Error loading report months:', error);
                        Swal.hideLoading();
                        Swal.showValidationMessage(`Error loading months: ${error.message}`);
                        Swal.getConfirmButton().disabled = true; // Disable button on error
                    }
                }
            }).then(async (result) => {
                // After the user confirms the month selection
                if (result.isConfirmed) {
                    const selectedMonth = result.value;
                    // Proceed to fetch and display the payroll report for the selected month
                    await fetchAndDisplayPayrollReport(selectedMonth);
                }
            });
        }

        // --- New helper function to encapsulate report fetching and display ---
        async function fetchAndDisplayPayrollReport(selectedMonth) {
            Swal.fire({
                title: 'Generating Report...',
                html: `Fetching payroll data for ${new Date(selectedMonth + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}. Please wait.`,
                didOpen: () => Swal.showLoading(),
                allowOutsideClick: false,
                allowEscapeKey: false
            });

            try {
                // Fetch the payroll report data for the chosen month
                const response = await fetch(`./includes/api/get_payroll_report.php?month=${selectedMonth}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server responded with status ${response.status}: ${errorText}`);
                }
                const data = await response.json();

                if (data.status === 'success') {
                const reportData = data.report;
                if (reportData.length === 0) {
                    Swal.fire({ icon: 'info', title: 'No Payroll Data', text: `No generated payrolls found for this month.` });
                    return;
                }
                let grandTotalNet = reportData.reduce((sum, p) => sum + parseFloat(p.net_salary || 0), 0);
                const reportHtml = `
                    <div id="payrollReportModal" class="text-left">
                        <h2 class="text-2xl font-bold mb-4 text-center">Payroll Report for ${new Date(selectedMonth + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</h2>
                        <div class="mb-4 text-center">
                            <button id="markAsPaidBtn" class="btn btn-success"><i class="fas fa-check-circle"></i> Mark as Paid</button>
                            <button id="exportPdfBtn" class="btn btn-danger"><i class="fas fa-file-pdf"></i> PDF</button>
                            <button id="exportExcelBtn" class="btn btn-info"><i class="fas fa-file-excel"></i> Excel</button>
                        </div>
                        <table class="table table-bordered" id="payrollgentbl" style="width:100%;">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" id="reportSelectAll"/></th>
                                    <th>Emp ID</th>
                                    <th>Name</th>
                                    <th class="text-right">Net Salary</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="3" class="text-right">Grand Total:</th>
                                    <th class="text-right">${grandTotalNet.toLocaleString('en-US', { style: 'currency', currency: 'SAR' })}</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>`;

                Swal.fire({
                    html: reportHtml,
                    width: '90%',
                    showConfirmButton: false,
                    showCancelButton: true,
                    cancelButtonText: 'Close',
                    didOpen: () => {
                        const table = $('#payrollgentbl').DataTable({
                            data: reportData,
                            columns: [
                                {
                                    data: 'payroll_id',
                                    orderable: false,
                                    className: 'text-center',
                                    render: function(data, type, row) {
                                        if (row.status === 'paid') {
                                            return '<span class="badge badge-success"><i class="fa fa-check-circle"></i> Paid</span>';
                                        }
                                        return `<input type="checkbox" class="report-checkbox" data-payroll-id="${row.payroll_id}">`;
                                    }
                                },
                                { data: 'emp_id' },
                                { data: 'employee_name' },
                                { data: 'net_salary', className: 'text-right', render: (d) => parseFloat(d || 0).toLocaleString('en-US', { style: 'currency', currency: 'SAR' }) }
                            ],
                            pageLength: 10,
                            lengthMenu: [10, 25, 50, -1],
                            order: [[1, 'asc']]
                        });

                        $('#markAsPaidBtn').on('click', async () => {
                            const selectedPayrollIds = table.rows().nodes().to$().find('.report-checkbox:checked').map(function() {
                                return $(this).data('payroll-id');
                            }).get();
                            
                            await updatePayrollStatus(selectedPayrollIds, 'paid', () => {
                                Swal.close();
                                fetchEmployees();
                            });
                        });
                        
                        $('#reportSelectAll').on('change', function() {
                            const isChecked = $(this).prop('checked');
                            table.rows().nodes().to$().find('.report-checkbox').prop('checked', isChecked);
                        });

                        $('#exportPdfBtn').on('click', () => exportPdfReport(reportData, selectedMonth));
                        $('#exportExcelBtn').on('click', () => exportExcelReport(reportData, selectedMonth));
                    }
                });
            } else {
                    showError('Error Generating Report', data.message || 'An unexpected error occurred while fetching report data.');
                }
            } catch (error) {
                console.error('Error fetching and displaying payroll report:', error);
                showError('Network Error', `Could not connect to the server or process report: ${error.message}. Please try again.`);
            }
        }

        // --- PDF Export Function (Updated to use selectedMonth for filename and report title) ---
        async function exportPdfReport(reportData, selectedMonth) {
            const { jsPDF } = window.jspdf;
            let sr = 1;
            const doc = new jsPDF('landscape'); // 'landscape' for wider reports
            const reportTitle = `Employee Payroll Report for ${new Date(selectedMonth + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}`;

            // Define table headers for PDF
            const headers = [
                ['SER', 'ID / IQAMA', 'EMPLOYEE NAME', 'IBAN', 'BANK CODE',
                'NET SALARY', 'BASIC', 'HOUSE', 'OTHER', 'DEDUCTION', 'REF']
            ];

            // Prepare table data for PDF
            const body = reportData.map(p => {
                const totalAllowances = (
                    parseFloat(p.housing_allowance || 0) +
                    parseFloat(p.transport_allowance || 0) +
                    parseFloat(p.food_allowance || 0) +
                    parseFloat(p.miscellaneous_allowance || 0) +
                    parseFloat(p.cashier_allowance || 0) +
                    parseFloat(p.fuel_allowance || 0) +
                    parseFloat(p.telephone_allowance || 0) +
                    parseFloat(p.other_allowance || 0) +
                    parseFloat(p.guard_allowance || 0)
                ).toFixed(2);
                return [
                    sr++,
                    p.iqama,
                    p.employee_name,
                    p.iban || 'N/A',
                    p.bank_name_s || 'N/A',
                    parseFloat(p.net_salary || 0).toFixed(2),
                    parseFloat(p.basic_salary || 0).toFixed(2),
                    parseFloat(p.housing_allowance || 0).toFixed(2),
                    totalAllowances,
                    parseFloat(p.total_deductions || 0).toFixed(2),
                    p.sponsor
                ];
            });

            // Add report title to PDF
            doc.setFontSize(16);
            doc.text(reportTitle, doc.internal.pageSize.width / 2, 15, { align: 'center' });
            doc.setFontSize(10);
            doc.text('Summary of all generated payrolls.', doc.internal.pageSize.width / 2, 25, { align: 'center' });
            
            // Generate table using autoTable plugin
            doc.autoTable({
                startY: 35, // Start table below the title
                head: headers,
                body: body,
                theme: 'striped',
                margin: { top: 35, right: 2, bottom: 20, left: 2 }, // Adjust margins
                tableWidth: '100%', // Use full page width
                headStyles: { 
                    fillColor: [224, 242, 254], 
                    textColor: [71, 85, 105], 
                    fontStyle: 'bold' 
                },
                styles: { 
                    fontSize: 6, 
                    cellPadding: 2, 
                    overflow: 'linebreak',
                    minCellWidth: 15 // Ensure minimum width for readability
                },
                columnStyles: { // Align numerical columns to the right
                    4: { halign: 'right' },
                    5: { halign: 'right' },
                    6: { halign: 'right' },
                    7: { halign: 'right' },
                    8: { halign: 'right' },
                    9: { halign: 'right' } 
                },
            });
            // Save the PDF with a dynamic filename based on the selected month
            doc.save(`payroll_report_${selectedMonth.replace('-', '_')}.pdf`);
        }

        // --- Excel (XLSX) Export Function (Updated to use selectedMonth for filename) ---
        function exportExcelReport(reportData, selectedMonth) {
            // Ensure the XLSX library is available
            if (typeof XLSX === 'undefined') {
                console.error("The XLSX library (SheetJS) is not loaded. Please include it in your project.");
                // You could also add a user-facing message here.
                return;
            }

            // Create a new workbook
            const wb = XLSX.utils.book_new();

            // 1. Add headers row
            const headers = [
                'SER', 'ID / IQAMA', 'EMPLOYEE NAME', 'IBAN', 'BANK CODE',
                'NET SALARY', 'BASIC', 'HOUSE', 'OTHER', 'DEDUCTION',
                'ADDRESS', 'CUR', 'STATUS', 'DESCRIPTION', 'REF'
            ];

            // 2. Map reportData to the desired row format, converting strings to numbers
            // By processing the data first, we can separate logic from the sheet creation step.
            const dataRows = reportData.map((p, index) => {
                // Calculate the total for the 'OTHER' allowances column
                // We ensure all values are parsed as numbers.
                const totalAllowances =
                    parseFloat(p.transport_allowance || 0) +
                    parseFloat(p.food_allowance || 0) +
                    parseFloat(p.miscellaneous_allowance || 0) +
                    parseFloat(p.cashier_allowance || 0) +
                    parseFloat(p.fuel_allowance || 0) +
                    parseFloat(p.telephone_allowance || 0) +
                    parseFloat(p.other_allowance || 0) +
                    parseFloat(p.guard_allowance || 0);
                // Return an array representing the row.
                // We use parseFloat to ensure all monetary values are treated as numbers.
                // We DO NOT use .toFixed() here, because it converts numbers to strings,
                // which prevents Excel from recognizing them as numbers.
                return [
                    index + 1, // Serial number
                    p.iqama,
                    p.employee_name,
                    p.iban || 'N/A',
                    p.bank_name_s || 'N/A',
                    parseFloat(p.net_salary || 0),
                    parseFloat(p.basic_salary || 0),
                    parseFloat(p.housing_allowance || 0),
                    totalAllowances,
                    parseFloat(p.total_deductions || 0),
                    'INDUSTRIAL CITY',
                    'SAR',
                    'ACTIVE',
                    'PAYROLL',
                    p.sponsor
                ];
            });

            // Combine headers and data rows
            const allRows = [headers, ...dataRows];

            // Convert the array of rows into an Excel worksheet
            // The library will automatically detect data types (number, string, etc.)
            const ws = XLSX.utils.aoa_to_sheet(allRows);

            // Optional: You can explicitly set column formats if needed, for example, to show 2 decimal places.
            // This gives you more control over the appearance in Excel.
            const numberFormat = '#,##0.00';
            const columnsToFormat = ['F', 'G', 'H', 'I', 'J']; // Corresponds to NET SALARY, BASIC, etc.

            // Loop through all data rows (starting from row 2 in Excel, which is index 1 here)
            for (let i = 1; i <= dataRows.length; i++) {
                columnsToFormat.forEach(colLetter => {
                    const cellAddress = colLetter + (i + 1); // e.g., F2, G2...
                    if (ws[cellAddress]) { // Check if the cell exists
                        ws[cellAddress].z = numberFormat; // 'z' is the number format property
                    }
                });
            }
            // Add the worksheet to the workbook
            XLSX.utils.book_append_sheet(wb, ws, "Payroll Report");

            // Generate the XLSX file and trigger download with a dynamic filename
            const fileName = `payroll_report_${selectedMonth.replace('-', '_')}.xlsx`;
            XLSX.writeFile(wb, fileName);
        }

        function formatNumber(value) {
        // Parse input (default to 0 if invalid), round to 2 decimal places, and format for SA locale
            const num = parseFloat(value || 0).toFixed(2);
            return num;
        }

        function formaNumberWFractionDigits(value) {
        // Parse input (default to 0 if invalid), round to 2 decimal places, and format for SA locale
            const num = Number(parseFloat(value || 0).toFixed(2));
            return num.toLocaleString('en-SA', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }

        function getDateParts(date = new Date(), part = null) {
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const parts = {
                year,
                month,
                day,
                fullDate: `${year}-${month}-${day}`
            };
            return part ? parts[part] : parts;
        }

        async function loadAvailableMonthsForMainPage() {
            try {
                const response = await fetch('./includes/api/get_available_months.php'); 
                if (!response.ok) {
                    throw new Error('Failed to fetch available months for main page');
                }
                const data = await response.json();
                
                const monthSelect = $('#payrollMonth');
                monthSelect.empty(); // Clear existing options

                if (data.status === 'success' && data.months.length > 0) {
                    data.months.forEach(month => {
                        monthSelect.append($('<option>', {
                            value: month.value,
                            text: month.label
                        }));
                    });

                    // Automatically select the most recent month (first in the sorted list)
                    monthSelect.val(data.months[0].value);
                    // Crucially, call fetchEmployees here to load data for the initially selected month
                    fetchEmployees(); 
                    $('#generateReportBtn').prop('disabled', false); // Enable report button
                } else {
                    // If no months are available, show a message and disable the report button
                    monthSelect.append($('<option>', {
                        value: '',
                        text: 'No months available for payroll',
                        disabled: true,
                        selected: true
                    }));
                    $('#generateReportBtn').prop('disabled', true);
                    showInfo('No Payroll Months', 'No generated payroll months found. Please generate payrolls first.');
                }
            } catch (error) {
                console.error('Error loading available months for main page:', error);
                showError('Error', 'Could not load available months for the main filter: ' + error.message);
                $('#generateReportBtn').prop('disabled', true); // Disable button on error
            }
        }

        async function updatePayrollStatus(payrollIds, status, successCallback = null) {
            if (!payrollIds || payrollIds.length === 0) {
                showWarning('No Records Selected', 'Please select at least one payroll record to update.');
                return;
            }
            const confirmation = await Swal.fire({
                title: `Mark ${payrollIds.length} record(s) as ${status}?`,
                text: "This action cannot be undone.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                confirmButtonText: `Yes, Mark as ${status}!`
            });

            if (!confirmation.isConfirmed) return;

            Swal.fire({ title: 'Updating Status...', didOpen: () => Swal.showLoading(), allowOutsideClick: false });

            try {
                const response = await fetch('./includes/api/update_payroll_status.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ payroll_ids: payrollIds, status: status }),
                });
                const result = await response.json();
                if (result.status === 'success') {
                    Swal.fire({ icon: 'success', title: 'Status Updated!', text: result.message })
                    .then(() => successCallback && successCallback());
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error updating payroll status:', error);
                showError('Update Failed', error.message);
            }
        }

    </script>

    </body>

    </html>
<?php } ?>